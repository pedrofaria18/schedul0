generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  name     String
  email    String @unique
  password String

  companies Company[]

  @@map("users")
}

model Company {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid

  name      String
  imageName String

  serviceTypes  ServiceType[]
  collaborators Collaborator[]
  address       Address[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  clients       Client[]
  appointments  Appointment[]

  @@map("companies")
}

model Service {
  id                    String  @id @default(uuid()) @db.Uuid
  collaboratorId        String  @map("collaborator_id") @db.Uuid
  serviceTypeId         String  @map("service_type_id") @db.Uuid
  appointmentId         String? @db.Uuid
  canceledAppointmentId String? @db.Uuid

  dateTime     DateTime
  appointment  Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  collaborator Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  serviceType  ServiceType  @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)

  @@map("services")
}

model ServiceType {
  id        String @id @default(uuid()) @db.Uuid
  companyId String @map("company_id") @db.Uuid

  name        String
  description String
  duration    Int
  price       Float

  collaborators Collaborator[]
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  service       Service[]

  @@map("service_types")
}

model Collaborator {
  id        String @id @default(uuid()) @db.Uuid
  companyId String @map("company_id") @db.Uuid
  firstName String
  lastName  String
  email     String
  phone     String

  serviceTypes  ServiceType[]
  address       Address?       @relation("CollaboratorAddress")
  workSchedules WorkSchedule[]
  appointments  Appointment[]
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  services      Service[]

  @@map("collaborators")
}

model Address {
  id             String  @id @default(uuid()) @db.Uuid
  companyId      String  @db.Uuid
  collaboratorId String? @unique @db.Uuid

  street  String
  city    String
  state   String
  zipCode String

  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  collaborator Collaborator? @relation("CollaboratorAddress", fields: [collaboratorId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

enum WorkScheduleDays {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@map("work_schedule_days")
}

model WorkSchedule {
  id             String  @id @default(uuid()) @db.Uuid
  collaboratorId String? @db.Uuid

  dayOfWeek          WorkScheduleDays
  startTimeMorning   String
  endTimeMorning     String
  startTimeAfternoon String
  endTimeAfternoon   String

  collaborator Collaborator? @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)

  @@map("work_schedules")
}

model Client {
  id        String @id @default(uuid()) @db.Uuid
  companyId String @map("company_id") @db.Uuid

  firstName String
  lastName  String
  email     String
  phone     String

  appointments Appointment[] @relation("ClientAppointments")
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("clients")
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED

  @@map("appointment_status")
}

model Appointment {
  id        String @id @default(uuid()) @db.Uuid
  companyId String @map("company_id") @db.Uuid
  clientId  String @map("client_id") @db.Uuid

  status AppointmentStatus @default(SCHEDULED)
  total  Float

  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  collaborators Collaborator[]
  services      Service[]
  client        Client         @relation("ClientAppointments", onDelete: Cascade, fields: [clientId], references: [id])

  @@map("appointments")
}
